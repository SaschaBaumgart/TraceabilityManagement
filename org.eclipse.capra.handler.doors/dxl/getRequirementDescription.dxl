string getRequirementDescription(string url)
{

// Usage:
// 
// string url = getURL(current Object)
// string url = "doors://doors.ikv-intern.local:36677/?version=2&prodID=0&urn=urn:telelogic::1-589c794e772f66ea-O-3-00000040"
//
// print getRequirementDescription(url)

	string result = null
	string decodeResult = null
	ModuleVersion mv
	int objectAbsno
	Item i
	string dbHost = null
	int dbPort
	string dbName
	string dbID = null

	decodeResult = decodeURL(url, dbHost, dbPort, dbName, dbID, i, mv, objectAbsno)

	if (null decodeResult)
	{
		if (dbID != getDatabaseIdentifier)
		{
			result = "The dbID does not match the current database."
		}
		else if (null i)
		{
			result = "Database: " dbName ""
		}
		else if (null mv)
		{
			// we're going to the top level node
			result = (type i) ": " (fullName i) ": " (description i)
		}
		else
		{
			// it's a module or baseline
			Module m = null
			if (isBaseline(mv))
			{
				result = "Baseline: " (fullName mv) " [" (versionString mv) "]: " (description module mv)
			}
			else
			{
				result = "Module: " (fullName mv) ": " (description module mv)
			}
			if (objectAbsno >= 0)
			{
				m = load(mv, false)
				if (null m)
				{
					// Something went wrong
					result = "ERROR: Could not open module " (fullName mv) "."
				}
				else
				{
					current = m
					Object o = object(objectAbsno, m)
					if (null o)
					{
						result = "ERROR: Could not locate object " objectAbsno "."
					}
					else 
					{
						string temp = null
						string heading = o."Object Heading"
						string text = o."Object Text"
						if (null heading) 
						{
							if (null text)
							{
								temp = "-"
							} 
							else 
							{
								temp = text
							}
						}
						else 
						{
							if (null text)
							{
								temp = heading
							} 
							else 
							{
								Buffer x = create
								x += heading
								x += " - "
								x += text
								temp = stringOf(x)
							}
						}
						
						
						result = temp
					} // else null o
				} // else null m
			} // objectAbsno >= 0
		}
	}
	return result
}
